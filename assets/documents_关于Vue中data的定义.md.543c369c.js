import{_ as s,o as a,c as n,N as o}from"./chunks/framework.e35b7731.js";const d=JSON.parse('{"title":"为什么 Vue 组件内部的 data 是一个函数而不是一个对象？","description":"","frontmatter":{},"headers":[],"relativePath":"documents/关于Vue中data的定义.md","lastUpdated":1685084473000}'),p={name:"documents/关于Vue中data的定义.md"},l=o(`<h1 id="为什么-vue-组件内部的-data-是一个函数而不是一个对象" tabindex="-1">为什么 Vue 组件内部的 data 是一个函数而不是一个对象？ <a class="header-anchor" href="#为什么-vue-组件内部的-data-是一个函数而不是一个对象" aria-label="Permalink to &quot;为什么 Vue 组件内部的 data 是一个函数而不是一个对象？&quot;">​</a></h1><blockquote><p>在 Vue 中，组件内部的 <code>data</code> 选项可以是一个函数或一个对象。然而，推荐将 <code>data</code> 选项定义为一个函数的形式，而不是一个对象。这是为了避免多个组件实例共享同一个数据对象，从而导致状态混乱的问题。</p></blockquote><h2 id="当-data-是一个对象" tabindex="-1">当 data 是一个对象 <a class="header-anchor" href="#当-data-是一个对象" aria-label="Permalink to &quot;当 data 是一个对象&quot;">​</a></h2><p>当 <code>data</code> 选项是一个对象时，它将被组件的所有实例共享。这意味着当一个实例修改了 <code>data</code> 中的某个属性，其他实例也会受到影响，它们会共享相同的状态，这通常不是我们期望的行为。</p><p>以下是使用对象形式的 <code>data</code> 选项的示例：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Component</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建两个组件实例</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> componentA </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Component</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> componentB </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Component</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 当修改其中一个组件的中的 data 值的时候，另一个组件的 data 值会一起改变</span></span>
<span class="line"><span style="color:#A6ACCD;">componentA</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(componentB</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>这种情况的主要原因在于<strong>两个组件实例共享同一个内存地址</strong>，当修改componentA的时候，componentB会同步发生改变。</p><h2 id="当-data-是一个函数" tabindex="-1">当 data 是一个函数 <a class="header-anchor" href="#当-data-是一个函数" aria-label="Permalink to &quot;当 data 是一个函数&quot;">​</a></h2><p>通过将 <code>data</code> 选项定义为一个函数，每个组件实例将会有一个独立的数据副本。每当创建一个组件实例时，Vue 会调用 <code>data</code> 函数并返回一个新的数据对象，确保每个组件实例都有自己的数据。这样，每个实例的数据都是相互独立的，它们之间不会相互影响。</p><p>以下是使用函数形式的 <code>data</code> 选项的示例：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Component</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">data</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">data</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    count</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建两个组件实例</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> componentA </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Component</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> componentB </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Component</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 当修改其中一个组件的中的 data 值的时候，另一个组件的 data 值不会一起改变</span></span>
<span class="line"><span style="color:#A6ACCD;">componentA</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(componentB</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>之所以当 <code>data</code> 为一个函数时每个组件实例都有自己的数据，这是因为函数返回的对象地址并不相同，这样每个组件中 <code>data</code> 都是独立的，这样修改其中一个组件不会影响其他组件中的 <code>data</code> 值。</p><h2 id="tips" tabindex="-1">Tips <a class="header-anchor" href="#tips" aria-label="Permalink to &quot;Tips&quot;">​</a></h2><p>如果 <code>data</code> 选项不包含组件内部使用的响应式数据，而只是一些固定的属性，那么使用对象形式的 <code>data</code> 是可以的。但是，一般推荐将 <code>data</code> 定义为一个函数，以保持一致性并避免潜在的问题。</p><p>通过使用函数形式的 <code>data</code> 选项，Vue 可以更好地管理组件实例的状态，确保组件之间的数据隔离，提高代码的可维护性和可扩展性。</p>`,15),e=[l];function t(c,r,D,y,F,A){return a(),n("div",null,e)}const i=s(p,[["render",t]]);export{d as __pageData,i as default};
